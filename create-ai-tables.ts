import { getPrismaClient } from './src/lib/prisma';

async function createAITables() {
  const prisma = await getPrismaClient();

  try {
    console.log('üîç V√©rification des tables ContentAnalysis et AISuggestion...');

    // Ex√©cuter la migration SQL directement
    await prisma.$executeRawUnsafe(`
      -- Cr√©er la table ContentAnalysis
      CREATE TABLE IF NOT EXISTS "ContentAnalysis" (
          "id" TEXT NOT NULL,
          "organizationId" TEXT,
          "platform" TEXT NOT NULL,
          "toneOfVoice" TEXT NOT NULL,
          "topHashtags" JSONB NOT NULL,
          "avgEngagement" DOUBLE PRECISION NOT NULL,
          "bestPostTypes" JSONB NOT NULL,
          "bestPostTimes" JSONB NOT NULL,
          "topPosts" JSONB NOT NULL,
          "analyzedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT "ContentAnalysis_pkey" PRIMARY KEY ("id")
      );
    `);

    console.log('‚úÖ Table ContentAnalysis cr√©√©e');

    await prisma.$executeRawUnsafe(`
      -- Cr√©er la table AISuggestion
      CREATE TABLE IF NOT EXISTS "AISuggestion" (
          "id" TEXT NOT NULL,
          "organizationId" TEXT,
          "category" TEXT NOT NULL,
          "contentType" TEXT NOT NULL,
          "title" TEXT NOT NULL,
          "content" TEXT NOT NULL,
          "hashtags" TEXT,
          "trendingNote" TEXT,
          "generatedBy" TEXT NOT NULL DEFAULT 'openai-gpt4',
          "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
          CONSTRAINT "AISuggestion_pkey" PRIMARY KEY ("id")
      );
    `);

    console.log('‚úÖ Table AISuggestion cr√©√©e');

    // Cr√©er les index
    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS "ContentAnalysis_organizationId_idx" ON "ContentAnalysis"("organizationId");
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS "ContentAnalysis_platform_idx" ON "ContentAnalysis"("platform");
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS "ContentAnalysis_analyzedAt_idx" ON "ContentAnalysis"("analyzedAt");
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS "AISuggestion_organizationId_category_idx" ON "AISuggestion"("organizationId", "category");
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS "AISuggestion_contentType_idx" ON "AISuggestion"("contentType");
    `);

    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS "AISuggestion_createdAt_idx" ON "AISuggestion"("createdAt");
    `);

    console.log('‚úÖ Index cr√©√©s');

    console.log('\nüéâ Migration termin√©e avec succ√®s !');
    console.log('\nLes tables suivantes ont √©t√© cr√©√©es:');
    console.log('  - ContentAnalysis (analyse du feed social media)');
    console.log('  - AISuggestion (suggestions g√©n√©r√©es par IA)');

  } catch (error: any) {
    if (error.message?.includes('already exists')) {
      console.log('‚úÖ Les tables existent d√©j√†');
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation des tables:', error.message);
      throw error;
    }
  } finally {
    await prisma.$disconnect();
  }
}

createAITables();
