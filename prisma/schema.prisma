generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// MULTI-TENANCY MODELS
// ============================================

enum UserRole {
  SUPER_ADMIN       // Propriétaire de la plateforme (accès complet à tous les instituts)
  ORG_OWNER         // Propriétaire d'un institut (accès complet à son organisation)
  ORG_ADMIN         // Co-gérant d'un institut (accès complet à l'organisation)
  ACCOUNTANT        // Comptable (accès aux factures, paiements, stats financières)
  LOCATION_MANAGER  // Responsable d'un point de vente (accès limité à son emplacement)
  STAFF             // Employé (accès opérationnel limité)
  RECEPTIONIST      // Réceptionniste (accès limité à la prise de RDV)
  CLIENT            // Client (accès espace client)
}

enum OrgType {
  SINGLE_LOCATION   // Institut avec un seul point de vente
  MULTI_LOCATION    // Institut avec plusieurs points de vente
}

enum OrgPlan {
  SOLO              // 49€/mois - 1 emplacement, 1 utilisateur admin
  DUO               // 99€/mois - 1 emplacement, 3 utilisateurs
  TEAM              // 199€/mois - 3 emplacements, 10 utilisateurs
  PREMIUM           // 399€/mois - Emplacements illimités, utilisateurs illimités
  STARTER           // Ancien nom - à supprimer après migration
  ESSENTIAL         // Ancien nom - à supprimer après migration
  PROFESSIONAL      // Ancien nom - à supprimer après migration
  ENTERPRISE        // Ancien nom - à supprimer après migration
}

enum OrgStatus {
  ACTIVE            // Organisation active
  TRIAL             // Période d'essai
  SUSPENDED         // Suspendue (impayé)
  CANCELLED         // Annulée
}

enum PaymentProvider {
  STRIPE            // Stripe Connect
  SUMUP             // SumUp
  PAYPAL            // PayPal
  POS_CLYO          // Logiciel de caisse Clyo
  POS_ADORIA        // Logiciel de caisse Adoria
  POS_SHORTCUTS     // Logiciel de caisse Shortcuts
  POS_OTHER         // Autre logiciel de caisse
}

// Organisation (Institut de beauté)
model Organization {
  id              String       @id @default(cuid())
  name            String       // "Beauté Éternelle Paris"
  slug            String       @unique // "beaute-eternelle-paris"
  legalName       String?      // Raison sociale
  type            OrgType      @default(SINGLE_LOCATION)

  // Domaine personnalisé
  domain          String?      @unique // "beaute-eternelle.fr"
  subdomain       String       @unique // "beaute-eternelle"

  // Base de données dédiée (chiffrée)
  databaseUrl     String?      // URL de la base de données PostgreSQL dédiée

  // Abonnement
  plan            OrgPlan      @default(SOLO)
  status          OrgStatus    @default(TRIAL)
  trialEndsAt     DateTime?
  subscriptionId  String?      // ID d'abonnement Stripe

  // Limites du plan
  maxLocations    Int          @default(1)
  maxUsers        Int          @default(1)
  maxStorage      Int          @default(5) // En GB

  // Contact principal
  ownerEmail      String
  ownerPhone      String?

  // Paiement et facturation
  billingEmail    String?
  billingAddress  String?      // JSON avec adresse complète

  // Mandat SEPA pour prélèvement automatique
  sepaIban        String?      // IBAN du compte bancaire
  sepaBic         String?      // BIC de la banque
  sepaAccountHolder String?    // Titulaire du compte
  sepaMandateRef  String?      // Référence unique du mandat (RUM)
  sepaMandateDate DateTime?    // Date de signature du mandat
  sepaMandate     Boolean      @default(false) // Mandat signé oui/non

  // Prochaine facturation
  nextBillingDate DateTime?    // Date du prochain prélèvement
  lastBillingDate DateTime?    // Date du dernier prélèvement
  lastPaymentDate DateTime?    // Date du dernier paiement réussi
  monthlyAmount   Float?       // Montant mensuel de l'abonnement

  // Stripe
  stripeCustomerId String?     @unique // ID du client Stripe

  // Template et versioning (pour modèle centralisé LAIA)
  templateVersion String       @default("1.0.0") // Version du template utilisée
  lastTemplateUpdate DateTime? // Dernière mise à jour du template

  // Configuration
  config          OrganizationConfig?

  // Relations
  locations              Location[]
  users                  User[]
  services               Service[]
  products               Product[]
  blogPosts              BlogPost[]
  paymentSettings        PaymentSettings?
  loyaltyProgram         LoyaltyProgramSettings?
  bookingSettings        BookingSettings?
  superAdminNotifications SuperAdminNotification[] // Notifications super admin
  auditLogs              AuditLog[]     // Logs d'audit
  invoices               Invoice[]      // Factures
  supportTickets         SupportTicket[] // Tickets de support
  subscriptionPromoCodes SubscriptionPromoCode[] @relation("SubscriptionPromoUsage") // Codes promo utilisés
  testimonials           Testimonial[]  @relation("OrganizationTestimonials") // Témoignages

  // CRM Relations
  convertedLeads         Lead[]         // Leads convertis en clients

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([slug])
  @@index([subdomain])
  @@index([status])
}

// Configuration d'une organisation (remplace SiteConfig)
model OrganizationConfig {
  id              String       @id @default(cuid())
  organizationId  String       @unique

  // Informations générales
  siteName        String       @default("Mon Institut de Beauté")
  siteTagline     String?      @default("Institut de Beauté & Bien-être")
  siteDescription String?

  // Contact
  email           String?      @default("contact@mon-institut.fr")
  phone           String?      @default("+33 6 00 00 00 00")
  address         String?
  city            String?
  postalCode      String?
  country         String?      @default("France")

  // Réseaux sociaux
  facebook        String?
  instagram       String?
  tiktok          String?
  whatsapp        String?
  linkedin        String?
  youtube         String?

  // Apparence
  primaryColor    String?      @default("#d4b5a0")
  secondaryColor  String?      @default("#2c3e50")
  accentColor     String?      @default("#20b2aa")
  logoUrl         String?
  faviconUrl      String?

  // Typographie
  fontFamily      String?      @default("Inter")
  headingFont     String?      @default("Playfair Display")
  baseFontSize    String?      @default("16px")
  headingSize     String?      @default("2.5rem")

  // Horaires (JSON)
  businessHours   String?      // {"lundi": "9h-18h", ...}

  // Géolocalisation
  latitude        String?
  longitude       String?
  googleMapsUrl   String?

  // Page d'accueil
  heroTitle       String?
  heroSubtitle    String?
  heroImage       String?
  aboutText       String?

  // Fondateur/Fondatrice
  founderName     String?
  founderTitle    String?
  founderQuote    String?      @db.Text
  founderImage    String?
  aboutIntro      String?      @db.Text
  aboutParcours   String?      @db.Text

  // Témoignages et formations (JSON)
  testimonials    String?      @db.Text
  formations      String?      @db.Text

  // CGV et mentions légales
  termsAndConditions String?   @db.Text
  privacyPolicy   String?      @db.Text
  legalNotice     String?      @db.Text

  // Emails
  emailSignature  String?
  welcomeEmailText String?     @db.Text

  // Informations légales
  siret           String?
  siren           String?
  tvaNumber       String?
  apeCode         String?
  rcs             String?
  capital         String?
  legalForm       String?

  // Assurance
  insuranceCompany String?
  insuranceContract String?
  insuranceAddress String?

  // Banque
  bankName        String?
  bankIban        String?
  bankBic         String?

  // Représentant légal
  legalRepName    String?
  legalRepTitle   String?

  // Tracking et Analytics
  googleAnalyticsId String?
  facebookPixelId String?
  metaVerificationCode String?
  googleVerificationCode String?

  // SEO Global
  defaultMetaTitle String?
  defaultMetaDescription String?
  defaultMetaKeywords String?

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

// Point de vente / Emplacement
model Location {
  id              String       @id @default(cuid())
  organizationId  String

  name            String       // "Beauté Éternelle - Champs-Élysées"
  slug            String       // "champs-elysees"

  // Adresse
  address         String
  city            String
  postalCode      String
  country         String       @default("France")
  latitude        String?
  longitude       String?

  // Contact
  phone           String?
  email           String?

  // Horaires spécifiques (si différents de l'organisation)
  businessHours   String?      // JSON

  // Configuration
  isMainLocation  Boolean      @default(false)
  active          Boolean      @default(true)

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  staff           UserLocation[]
  workingHours    WorkingHours[]
  blockedSlots    BlockedSlot[]
  reservations    Reservation[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([active])
}

// Paramètres de paiement d'une organisation
model PaymentSettings {
  id                    String          @id @default(cuid())
  organizationId        String          @unique

  // Fournisseur principal
  primaryProvider       PaymentProvider @default(STRIPE)

  // Stripe Connect
  stripeAccountId       String?         // ID du compte Stripe Connect
  stripePublicKey       String?
  stripeSecretKey       String?         // Chiffré
  stripeConnected       Boolean         @default(false)
  stripeOnboardingCompleted Boolean     @default(false)

  // Autres fournisseurs
  sumupApiKey           String?         // Chiffré
  paypalClientId        String?
  paypalSecretKey       String?         // Chiffré

  // Logiciel de caisse (POS)
  posProvider           PaymentProvider?
  posApiUrl             String?
  posApiKey             String?         // Chiffré
  posWebhookUrl         String?
  posSyncEnabled        Boolean         @default(false)
  posLastSync           DateTime?

  // Frais de plateforme (pour future monétisation)
  platformFeePercent    Float           @default(0)
  platformFeeFixed      Float           @default(0)

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  organization          Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

// Programme de fidélité d'une organisation
model LoyaltyProgramSettings {
  id                      String       @id @default(cuid())
  organizationId          String       @unique

  // Activation
  isEnabled               Boolean      @default(false)

  // Configuration des points
  pointsPerEuro           Float        @default(1)    // 1 point par euro dépensé
  pointsValue             Float        @default(0.01) // 1 point = 0.01€
  minPointsToRedeem       Int          @default(100)  // Minimum 100 points pour utiliser
  pointsExpirationDays    Int?                        // null = pas d'expiration

  // Paliers VIP
  bronzeThreshold         Float        @default(0)    // Dès l'inscription
  silverThreshold         Float        @default(500)  // 500€ dépensés
  goldThreshold           Float        @default(1500) // 1500€ dépensés
  platinumThreshold       Float        @default(5000) // 5000€ dépensés

  // Avantages par palier (JSON)
  bronzePerks             String?      // [{"type": "discount", "value": 5}]
  silverPerks             String?
  goldPerks               String?
  platinumPerks           String?

  // Programme de parrainage
  referralEnabled         Boolean      @default(true)
  referralRewardAmount    Float        @default(20)   // 20€ de réduction
  referralMinimumSpend    Float        @default(0)    // Dépense minimum du filleul

  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  organization            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

// Paramètres de réservation d'une organisation
model BookingSettings {
  id                        String       @id @default(cuid())
  organizationId            String       @unique

  // Contraintes de réservation
  minAdvanceBookingHours    Int          @default(2)    // Minimum 2h à l'avance
  maxAdvanceBookingDays     Int          @default(30)   // Maximum 30 jours à l'avance
  cancellationDeadlineHours Int          @default(24)   // Annulation gratuite 24h avant

  // Options
  allowStaffSelection       Boolean      @default(true) // Client peut choisir son praticien
  requireLocationSelection  Boolean      @default(false) // Obligatoire si multi-emplacements
  allowOnlinePayment        Boolean      @default(true)
  requireDepositPercent     Float?                      // % d'acompte requis

  // Notifications automatiques
  sendConfirmationEmail     Boolean      @default(true)
  sendReminder24h           Boolean      @default(true)
  sendReminder2h            Boolean      @default(false)
  sendReviewRequest         Boolean      @default(true)

  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt

  organization              Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

// Utilisateur (client ou staff)
model User {
  id               String            @id @default(cuid())
  organizationId   String?           // null pour SUPER_ADMIN
  email            String
  password         String
  name             String
  phone            String?
  role             UserRole          @default(CLIENT)

  // Permissions personnalisées (JSON)
  customPermissions String?          // {"canViewRevenue": false, "canDeleteReservations": true}

  // Visibilité et disponibilité (pour le staff)
  isVisible        Boolean           @default(true)  // Visible dans la liste des praticiens
  isAvailable      Boolean           @default(true)  // Disponible pour les réservations

  // Client data
  loyaltyPoints    Int               @default(0)
  totalSpent       Float             @default(0)
  adminNotes       String?
  allergies        String?
  birthDate        DateTime?
  lastVisit        DateTime?
  medicalNotes     String?
  preferences      String?
  skinType         String?

  // Auth
  resetToken       String?
  resetTokenExpiry DateTime?
  lastLoginAt      DateTime?         // Dernière connexion

  // Relations
  organization     Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  locations        UserLocation[]    // Emplacements assignés (pour le staff)
  evolutions       ClientEvolution[]
  loyaltyHistory   LoyaltyHistory[]
  loyaltyProfile   LoyaltyProfile?
  reservations     Reservation[]
  reviews          Review[]
  notifications    Notification[]
  referralsMade    Referral[]        @relation("ReferralReferrer")
  referredBy       Referral?         @relation("ReferralReferred")
  discounts        Discount[]

  // CRM Relations
  assignedLeads    Lead[]
  leadInteractions LeadInteraction[]
  contactFormLeads ContactFormLead[]
  demoSlots        DemoSlot[]        @relation("DemoSlots")
  orders           Order[]
  payments         Payment[]
  stockMovements   StockMovement[]
  giftCards        GiftCard[]        @relation("GiftCardPurchaser")
  auditLogs        AuditLog[]        // Logs d'actions (pour SUPER_ADMIN)
  ticketsCreated   SupportTicket[]   @relation("TicketCreator")
  ticketsAssigned  SupportTicket[]   @relation("TicketAssignee")
  ticketMessages   TicketMessage[]
  platformNews     PlatformNews[]    // Nouveautés LAIA Beauty créées

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@unique([organizationId, email])
  @@index([email])
  @@index([organizationId])
  @@index([role])
  @@index([createdAt])
}

// Association User <-> Location (Many-to-Many)
model UserLocation {
  id              String   @id @default(cuid())
  userId          String
  locationId      String

  // Rôle spécifique à cet emplacement (peut différer du rôle global)
  roleAtLocation  UserRole @default(STAFF)

  // Permissions spécifiques
  canManageSchedule Boolean @default(false)
  canViewRevenue    Boolean @default(false)
  canManageStock    Boolean @default(false)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location        Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([userId])
  @@index([locationId])
}

model Reservation {
  id              String    @id @default(cuid())
  organizationId  String?   // Nullable temporairement pour migration
  locationId      String?   // null si la réservation n'est pas liée à un emplacement spécifique
  userId          String
  staffId         String?   // Praticien assigné
  serviceId       String?
  services        String    @default("[]") // JSON array of service IDs
  packages        String    @default("{}") // JSON object with service packages (single/forfait/abonnement)
  isSubscription  Boolean   @default(false) // True si c'est un abonnement mensuel
  date            DateTime
  time            String
  totalPrice      Float
  status          String    @default("pending")
  source          String    @default("site")
  notes           String?
  paymentStatus   String    @default("unpaid")
  paymentDate     DateTime?
  paymentAmount   Float?
  paymentMethod      String?
  stripePaymentId    String?   // ID du paiement Stripe (payment_intent_xxx)
  stripeSessionId    String?   // ID de la session Stripe Checkout
  invoiceNumber      String?
  paymentNotes       String?
  reviewEmailSent    Boolean   @default(false)
  reviewWhatsAppSent Boolean   @default(false)
  reminderSent       Boolean   @default(false)
  reminder24hSent    Boolean   @default(false)
  reminder2hSent     Boolean   @default(false)
  rescheduledFrom    String?   // ID de la réservation d'origine si reprogrammée
  rescheduledTo      String?   // ID de la nouvelle réservation si reprogrammée
  rescheduledAt      DateTime? // Date de la reprogrammation
  giftCardId         String?   // ID de la carte cadeau utilisée pour cette réservation
  giftCardUsedAmount Float?    // Montant de la carte cadeau utilisé
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  location        Location? @relation(fields: [locationId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  service         Service?  @relation(fields: [serviceId], references: [id])
  giftCard        GiftCard? @relation("GiftCardReservations", fields: [giftCardId], references: [id])
  review          Review?
  stockMovements  StockMovement[]

  @@index([organizationId])
  @@index([locationId])
  @@index([userId])
  @@index([staffId])
  @@index([date])
  @@index([status])
  @@index([createdAt])
}

model Service {
  id                String        @id @default(cuid())
  organizationId    String?       // Nullable temporairement pour migration
  slug              String        @default("")
  name              String
  shortDescription  String        @default("")
  description       String
  metaTitle         String?
  metaDescription   String?
  keywords          String?
  price             Float
  launchPrice       Float?
  promoPrice        Float?
  forfaitPrice      Float?
  forfaitPromo      Float?
  duration          Int
  benefits          String? // JSON
  process           String? // JSON - Deprecated, use protocol instead
  protocol          String? // JSON - Array of {title, duration, desc}
  recommendations   String?
  contraindications String?
  mainImage         String?
  imageSettings     String? // JSON pour objectFit, position, zoom
  imagePositionX    Int?    @default(50) // Position horizontale en %
  imagePositionY    Int?    @default(50) // Position verticale en %
  imageObjectFit    String? @default("cover") // "cover" ou "contain"
  gallery           String? // JSON
  videoUrl          String?
  canBeOption       Boolean       @default(false)
  category          String?       // DEPRECATED: Utiliser categoryId et subcategoryId
  categoryId        String?       // Nouvelle relation vers ServiceCategory
  subcategoryId     String?       // Relation vers ServiceSubcategory
  order             Int           @default(0)
  active            Boolean       @default(true)
  featured          Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  organization      Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reservations      Reservation[]
  stockLinks        ServiceStock[]  // Relation avec le stock
  serviceCategory   ServiceCategory?    @relation("ServiceToCategory", fields: [categoryId], references: [id])
  serviceSubcategory ServiceSubcategory? @relation("ServiceToSubcategory", fields: [subcategoryId], references: [id])
  @@index([organizationId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([active, featured])
  @@index([active, order])
  @@index([categoryId, active])
}

model LoyaltyProfile {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  points                  Int       @default(0)
  tier                    String    @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  individualServicesCount Int       @default(0)
  packagesCount           Int       @default(0)
  totalSpent              Float     @default(0)
  availableDiscounts      String    @default("[]") // JSON
  referralCode            String?   @unique // Code parrainage unique du client
  referredBy              String?   // Code de parrainage utilisé lors de l'inscription
  totalReferrals          Int       @default(0) // Nombre de parrainages effectués
  lastVisit               DateTime?
  notes                   String?   @db.Text // Notes administratives sur le client
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id])
  history                 LoyaltyHistory[]
}

model LoyaltyHistory {
  id            String         @id @default(cuid())
  userId        String
  profileId     String?
  action        String
  points        Int            @default(0)
  description   String
  reservationId String?
  orderId       String?        // Pour achats produits/formations
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  profile       LoyaltyProfile? @relation(fields: [profileId], references: [id])
}

model Referral {
  id                String         @id @default(cuid())
  referrerUserId    String         // ID de l'utilisateur parrain
  referralCode      String         @unique // Code unique de parrainage
  referredEmail     String?        // Email du filleul avant inscription
  referredName      String?        // Nom du filleul
  referredUserId    String?        @unique // ID du filleul une fois inscrit
  status            String         @default("pending") // pending, used, rewarded
  rewardAmount      Float          @default(20) // Montant de la récompense en euros
  rewardUsedAt      DateTime?      // Date d'utilisation de la récompense
  firstServiceDate  DateTime?      // Date du premier soin du filleul
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  referrer          User           @relation("ReferralReferrer", fields: [referrerUserId], references: [id])
  referred          User?          @relation("ReferralReferred", fields: [referredUserId], references: [id])
}

model BlogPost {
  id              String       @id @default(cuid())
  organizationId  String?      // Nullable temporairement pour migration
  slug            String
  title           String
  excerpt         String
  content         String
  category        String
  author          String       @default("LAIA SKIN Institut")
  readTime        String       @default("5 min")
  featured        Boolean      @default(false)
  published       Boolean      @default(true)
  mainImage       String?
  gallery         String? // JSON
  tags            String? // JSON
  metaTitle       String?
  metaDescription String?
  publishedAt     DateTime     @default(now())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  @@index([organizationId])
  @@index([published])
}

model ClientEvolution {
  id             String   @id @default(cuid())
  userId         String
  sessionNumber  Int
  serviceName    String
  sessionDate    DateTime
  beforePhoto    String?
  afterPhoto     String?
  videoUrl       String?
  improvements   String? // JSON
  clientFeedback String?
  adminNotes     String?
  skinAnalysis   String? // JSON
  treatedAreas   String? // JSON
  productsUsed   String? // JSON
  hydrationLevel Int?
  elasticity     Int?
  pigmentation   Int?
  wrinkleDepth   Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Review {
  id            String       @id @default(cuid())
  userId        String
  reservationId String?      @unique
  orderId       String?      @unique // Pour avis sur produits/formations
  serviceName   String?
  itemType      String?      // "service", "product", "formation"
  itemId        String?      // ID du service/produit/formation
  itemName      String?      // Nom du service/produit/formation
  rating        Int
  comment       String
  satisfaction  Int          @default(5)
  photos        String       @default("[]") // JSON array of photo URLs
  response      String?
  approved      Boolean      @default(false)
  featured      Boolean      @default(false)
  source        String       @default("site") // site, email, whatsapp, google
  googleReview  Boolean      @default(false)
  googleUrl     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  order         Order?       @relation(fields: [orderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // reminder, promotion, loyalty, birthday, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedSlot {
  id         String    @id @default(cuid())
  locationId String?   // Nullable temporairement pour migration
  date       DateTime
  time       String?   // Si null, toute la journée est bloquée
  allDay     Boolean   @default(false)
  reason     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  @@index([locationId])
}

model WorkingHours {
  id         String    @id @default(cuid())
  locationId String?   // Nullable temporairement pour migration
  dayOfWeek  Int       // 0 = Dimanche, 1 = Lundi, etc.
  startTime  String    // Format: "14:00"
  endTime    String    // Format: "20:00"
  isOpen     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  @@index([locationId])
}

model Package {
  id          String   @id @default(cuid())
  name        String
  description String
  services    String // JSON array of service IDs
  price       Float
  validDays   Int      @default(90)
  maxUses     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Lead - Modèle basique de capture formulaire (conservé pour compatibilité)
// Pour le CRM complet, voir le modèle Lead CRM plus bas
model ContactFormLead {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  subject     String?
  message     String?
  source      String   @default("contact_form") // contact_form, instagram, facebook, phone
  status      String   @default("new") // new, contacted, qualified, converted, lost
  notes       String?
  userId      String?  // Lien vers User si converti en client
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
}

model SiteConfig {
  id                String   @id @default(cuid())

  // Informations générales
  siteName          String   @default("Mon Institut de Beauté")
  siteTagline       String?  @default("Institut de Beauté & Bien-être")
  siteDescription   String?

  // Contact
  email             String?  @default("contact@mon-institut.fr")
  phone             String?  @default("+33 6 00 00 00 00")
  address           String?
  city              String?
  postalCode        String?
  country           String?  @default("France")

  // Réseaux sociaux
  facebook          String?
  instagram         String?
  tiktok            String?
  whatsapp          String?
  linkedin          String?
  youtube           String?

  // Apparence
  primaryColor      String?  @default("#d4b5a0")
  secondaryColor    String?  @default("#2c3e50")
  accentColor       String?  @default("#20b2aa")
  logoUrl           String?
  faviconUrl        String?

  // Typographie
  fontFamily        String?  @default("Inter") // Police principale
  headingFont       String?  @default("Playfair Display") // Police des titres
  baseFontSize      String?  @default("16px") // Taille de base
  headingSize       String?  @default("2.5rem") // Taille des titres

  // Horaires (JSON)
  businessHours     String?  // {"lundi": "9h-18h", "mardi": "9h-18h", ...}

  // Géolocalisation pour SEO Schema.org
  latitude          String?
  longitude         String?
  googleMapsUrl     String?

  // Page d'accueil
  heroTitle         String?
  heroSubtitle      String?
  heroImage         String?
  aboutText         String?

  // Fondateur/Fondatrice
  founderName       String?  // Ex: "Laïa Gherbi"
  founderTitle      String?  // Ex: "Fondatrice & Experte en soins esthétiques"
  founderQuote      String?  @db.Text // Citation du fondateur
  founderImage      String?  // Photo du fondateur
  aboutIntro        String?  @db.Text // Texte d'introduction page À propos
  aboutParcours     String?  @db.Text // Parcours professionnel

  // Témoignages (JSON array)
  testimonials      String?  @db.Text // [{"name": "...", "text": "...", "rating": 5}]

  // Formations (JSON array pour page À propos)
  formations        String?  @db.Text // [{"name": "CAP Esthétique", "year": "2010"}]

  // CGV et mentions légales
  termsAndConditions String?  @db.Text
  privacyPolicy      String?  @db.Text
  legalNotice        String?  @db.Text

  // Emails
  emailSignature     String?
  welcomeEmailText   String?  @db.Text

  // Informations légales (ajoutées pour white-labeling)
  legalName         String?  // Raison sociale
  siret             String?
  siren             String?
  tvaNumber         String?  // N° TVA intracommunautaire
  apeCode           String?  // Code APE/NAF
  rcs               String?  // RCS
  capital           String?  // Capital social
  legalForm         String?  // SARL, SAS, EURL, etc.

  // Assurance
  insuranceCompany  String?
  insuranceContract String?
  insuranceAddress  String?  // Adresse de l'assureur

  // Banque (pour mentions légales complètes)
  bankName          String?
  bankIban          String?
  bankBic           String?

  // Représentant légal
  legalRepName      String?
  legalRepTitle     String?  // Gérant(e), Président(e), etc.

  // URLs et domaines
  customDomain      String?  @unique
  baseUrl           String?  // URL de base du site (ex: https://mon-institut.fr)

  // Tracking et Analytics
  googleAnalyticsId String?
  facebookPixelId   String?
  metaVerificationCode String?
  googleVerificationCode String?

  // SEO Global
  defaultMetaTitle       String?
  defaultMetaDescription String?
  defaultMetaKeywords    String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model EmailHistory {
  id           String   @id @default(cuid())
  from         String   @default("contact@laiaskininstitut.fr")
  to           String   // Email ou liste d'emails séparés par virgule
  subject      String
  content      String   @db.Text // Contenu du message
  template     String?  // Template utilisé
  status       String   @default("sent") // sent, failed, pending, delivered, received, opened, clicked, bounced
  direction    String   @default("outgoing") // outgoing, incoming
  campaignId   String?
  userId       String?  // Client associé
  errorMessage String?
  openedAt     DateTime?
  clickedAt    DateTime?
  openCount    Int      @default(0) // Nombre d'ouvertures
  clickCount   Int      @default(0) // Nombre de clics
  resendId     String?  // ID Resend pour le tracking
  messageId    String?  // Message-ID de l'email
  archived     Boolean  @default(false) // Pour archiver les conversations
  createdAt    DateTime @default(now())
  campaign     EmailCampaign? @relation(fields: [campaignId], references: [id])
}

model EmailCampaign {
  id             String   @id @default(cuid())
  name           String
  subject        String
  content        String
  template       String?
  recipients     String   // JSON array des destinataires
  recipientCount Int      @default(0)
  status         String   @default("draft") // draft, scheduled, sent, cancelled
  scheduledAt    DateTime?
  sentAt         DateTime?
  openRate       Float    @default(0)
  clickRate      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  emails         EmailHistory[]
}

model Discount {
  id                String    @id @default(cuid())
  userId            String
  type              String    // service_5, package_9, birthday, referral, postponed
  amount            Float
  status            String    @default("available") // available, used, expired, postponed
  originalReason    String    // Raison initiale (ex: "5ème soin", "9ème séance", "Anniversaire")
  usedAt            DateTime?
  usedForReservation String?  // ID de la réservation où la réduction a été utilisée
  expiresAt         DateTime? // Date d'expiration
  postponedFrom     String?   // ID de la réduction d'origine si reportée
  postponedTo       DateTime? // Date jusqu'à laquelle c'est reporté
  postponedReason   String?   // Raison du report
  notes             String?   // Notes additionnelles
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
}

model PromoCode {
  id           String    @id @default(cuid())
  code         String    @unique
  discount     Float     // Montant de la réduction
  type         String    // birthday, referral, special
  validFrom    DateTime  @default(now())
  validUntil   DateTime?
  maxUses      Int?      // Nombre max d'utilisations
  usedCount    Int       @default(0)
  userId       String?   // Si le code est spécifique à un utilisateur
  conditions   String?   // Conditions d'utilisation (JSON)
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model EmailAutomation {
  id          String   @id @default(cuid())
  name        String
  trigger     String   // birthday, appointment_reminder, review_request, etc.
  template    String   // EmailJS template ID
  enabled     Boolean  @default(true)
  timing      String?  // JSON avec les infos de timing
  conditions  String?  // JSON avec les conditions
  lastRun     DateTime?
  nextRun     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GoogleReview {
  id           String   @id @default(cuid())
  authorName   String
  authorPhoto  String?
  rating       Int
  comment      String
  reviewId     String   @unique // ID Google pour éviter les doublons
  publishedAt  DateTime
  replyText    String?
  replyAt      DateTime?
  helpful      Int      @default(0)
  language     String   @default("fr")
  syncedAt     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BusinessStats {
  id                 String   @id @default(cuid())
  googleRating       Float    @default(0)
  googleReviewCount  Int      @default(0)
  internalRating     Float    @default(0)
  internalReviewCount Int     @default(0)
  lastGoogleSync     DateTime?
  googlePlaceId      String?
  googleBusinessUrl  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model NewsletterSubscriber {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  isActive        Boolean   @default(true)
  subscribedAt    DateTime  @default(now())
  unsubscribedAt  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model WhatsAppHistory {
  id            String   @id @default(cuid())
  from          String   // Numéro de téléphone de l'expéditeur
  to            String   // Numéro de téléphone du destinataire
  message       String   // Contenu du message
  status        String   @default("sent") // sent, delivered, read, failed
  direction     String   @default("outgoing") // outgoing, incoming
  userId        String?  // Client associé
  mediaUrl      String?  // URL des médias attachés
  errorMessage  String?
  deliveredAt   DateTime?
  readAt        DateTime?
  createdAt     DateTime @default(now())
}

model WhatsAppTemplate {
  id            String   @id @default(cuid())
  name          String   @unique
  category      String   // reminder, promotion, birthday, followup, custom
  content       String   // Template avec variables {name}, {time}, etc.
  variables     String   // JSON array des variables utilisées
  usage         Int      @default(0)
  successRate   Float    @default(100)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WhatsAppAutomation {
  id            String   @id @default(cuid())
  name          String
  trigger       String   // appointment_24h, appointment_48h, birthday, post_service, review_request
  templateId    String   // Référence au template
  enabled       Boolean  @default(true)
  timing        String?  // JSON avec les infos de timing (heures avant/après, heure d'envoi, etc.)
  conditions    String?  // JSON avec les conditions d'envoi
  lastRun       DateTime?
  nextRun       DateTime?
  messagesSent  Int      @default(0)
  successCount  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WhatsAppCampaign {
  id             String   @id @default(cuid())
  name           String
  templateId     String   // Référence au template
  recipients     String   // JSON array des numéros ou tags
  recipientCount Int      @default(0)
  status         String   @default("draft") // draft, scheduled, active, paused, completed, cancelled
  scheduledAt    DateTime?
  startedAt      DateTime?
  completedAt    DateTime?
  sentCount      Int      @default(0)
  deliveredCount Int      @default(0)
  readCount      Int      @default(0)
  failedCount    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CommunicationHistory {
  id           String   @id @default(cuid())
  userId       String   // Client associé
  type         String   // email, whatsapp, sms, call
  direction    String   // incoming, outgoing
  subject      String?  // Pour les emails
  content      String   // Contenu du message
  status       String   @default("sent") // sent, delivered, read, failed
  metadata     String?  // JSON avec métadonnées supplémentaires
  createdAt    DateTime @default(now())
}

model Product {
  id               String            @id @default(cuid())
  organizationId   String?           // Nullable temporairement pour migration
  slug             String            @default("")
  name             String
  description      String
  shortDescription String?
  metaTitle        String?
  metaDescription  String?
  keywords         String?
  price            Float
  salePrice        Float?
  category         String?
  categoryId       String?
  productCategory  ProductCategory?  @relation(fields: [categoryId], references: [id])
  brand            String?
  mainImage        String?
  imageSettings    String?  // JSON pour objectFit, position, zoom
  gallery          String?  // JSON array d'URLs d'images
  ingredients      String?
  usage            String?
  benefits         String?
  active           Boolean  @default(true)
  featured         Boolean  @default(false)
  order            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  @@index([organizationId])
  @@index([active])
}

model ProductCategory {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  active    Boolean   @default(true)
  order     Int       @default(0)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Stock {
  id              String    @id @default(cuid())
  name            String
  description     String?
  category        String?   // Consommables, Matériel, Produits de soin, etc.
  quantity        Int       @default(0)
  initialQuantity Int?      // Quantité initiale pour afficher "X sur Y"
  minQuantity     Int       @default(5)  // Seuil d'alerte
  unit            String?   // ml, g, pièce, etc.
  cost            Float?    // Prix d'achat
  supplier        String?
  purchaseUrl     String?   // URL pour racheter le produit
  reference       String?
  barcode         String?
  expiryDate      DateTime?
  lastRestocked   DateTime?
  location        String?   // Emplacement dans le stock
  notes           String?
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  serviceLinks    ServiceStock[]  // Relation avec les services
  movements       StockMovement[]  // Historique des mouvements

  @@index([category])
}

// Table de liaison entre Services et Stock (Many-to-Many)
model ServiceStock {
  id                String    @id @default(cuid())
  serviceId         String
  stockId           String
  quantityPerUse    Float     @default(1)  // Quantité consommée par prestation (ex: 5ml, 10g, etc.)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  service           Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  stock             Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([serviceId, stockId])
  @@index([serviceId])
  @@index([stockId])
}

// Historique des mouvements de stock
model StockMovement {
  id              String    @id @default(cuid())
  stockId         String
  type            String    // "IN" (ajout), "OUT" (utilisation), "ADJUSTMENT" (ajustement manuel)
  quantity        Float     // Quantité (positive ou négative)
  reason          String?   // Raison du mouvement
  reservationId   String?   // Si lié à une réservation
  userId          String?   // Qui a effectué l'action
  createdAt       DateTime  @default(now())

  stock           Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)
  reservation     Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([stockId])
  @@index([reservationId])
  @@index([createdAt])
}

model Formation {
  id                String   @id @default(cuid())
  slug              String   @unique @default("")
  name              String
  shortDescription  String   @default("")
  description       String
  metaTitle         String?
  metaDescription   String?
  keywords          String?
  price             Float
  promoPrice        Float?
  duration          Int      // Durée en heures
  level             String?  // Débutant, Intermédiaire, Avancé
  program           String?  // JSON - Programme détaillé de la formation
  objectives        String?  // JSON - Objectifs pédagogiques
  prerequisites     String?  // Prérequis
  certification     String?  // Type de certification délivrée
  maxParticipants   Int?     // Nombre max de participants
  mainImage         String?
  imageSettings     String?  // JSON pour objectFit, position, zoom
  gallery           String?  // JSON
  videoUrl          String?
  category          String?
  instructor        String?  // Nom du formateur
  active            Boolean  @default(true)
  featured          Boolean  @default(false)
  order             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique // Numéro de commande unique (ex: ORD-2024-00001)
  userId          String?  // Peut être null pour commandes invités
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerAddress String?  // JSON avec adresse complète

  orderType       String   // "product" ou "formation"
  items           String   // JSON array des articles commandés [{id, name, quantity, price}]

  subtotal        Float    // Sous-total
  shippingCost    Float    @default(0)
  discount        Float    @default(0)
  totalAmount     Float    // Montant total

  paymentStatus   String   @default("pending") // pending, paid, failed, refunded
  paymentMethod   String?  // card, transfer, cash, stripe
  paymentDate     DateTime?
  transactionId   String?  // ID de transaction Stripe/autre

  status          String   @default("pending") // pending, confirmed, processing, shipped, delivered, cancelled
  shippingStatus  String?  // pending, shipped, delivered
  trackingNumber  String?

  scheduledDate   DateTime? // Date prévue de retrait/livraison/formation
  scheduledTime   String?   // Heure prévue (format HH:mm)

  notes           String?  // Notes client
  adminNotes      String?  // Notes internes admin

  invoiceUrl      String?  // URL de la facture générée

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User?    @relation(fields: [userId], references: [id])
  reviews         Review[]

  @@index([userId])
  @@index([orderNumber])
  @@index([paymentStatus])
  @@index([status])
}

model MagicLink {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([email])
}

model GiftCard {
  id              String    @id @default(cuid())
  code            String    @unique // Code unique de la carte cadeau (ex: GIFT-XXXX-XXXX)
  amount          Float     // Montant de la carte cadeau
  initialAmount   Float     // Montant initial (pour historique)
  balance         Float     // Solde restant
  purchasedBy     String?   // ID de l'utilisateur qui a acheté
  purchasedFor    String?   // Nom du bénéficiaire si cadeau
  recipientEmail  String?   // Email du bénéficiaire
  recipientPhone  String?   // Téléphone du bénéficiaire
  message         String?   // Message personnalisé
  status          String    @default("active") // active, used, expired, cancelled
  purchaseDate    DateTime  @default(now())
  expiryDate      DateTime? // Date d'expiration (optionnelle)
  usedDate        DateTime? // Date d'utilisation complète
  createdBy       String?   // ID admin qui a créé (si création manuelle)
  notes           String?   // Notes admin
  paymentMethod   String?   // Mode de paiement (CB, espèces, chèque, etc.)
  paymentStatus   String    @default("paid") // paid, pending
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  purchaser       User?     @relation("GiftCardPurchaser", fields: [purchasedBy], references: [id])
  reservations    Reservation[] @relation("GiftCardReservations") // Réservations faites avec cette carte

  @@index([code])
  @@index([purchasedBy])
  @@index([status])
}

model GiftCardSettings {
  id                      String   @id @default(cuid())
  emailSubject            String   @default("Vous avez reçu une carte cadeau Laia Skin Institut !")
  emailTitle              String   @default("🎁 Vous avez reçu une Carte Cadeau !")
  emailIntro              String   @db.Text @default("Quelle belle attention ! Vous venez de recevoir une carte cadeau pour découvrir ou redécouvrir les soins d'exception de Laia Skin Institut.")
  emailInstructions       String   @db.Text @default("Utilisez le code ci-dessous lors de votre réservation en ligne ou contactez-nous pour prendre rendez-vous.")
  emailFooter             String   @db.Text @default("Cette carte cadeau est valable 1 an à partir de la date d'émission.")
  physicalCardTitle       String   @default("CARTE CADEAU")
  physicalCardSubtitle    String   @default("Laia Skin Institut")
  physicalCardValidity    String   @default("Valable 1 an")
  physicalCardInstructions String  @db.Text @default("Présentez cette carte lors de votre visite ou utilisez le code en ligne.")
  cardColorFrom           String   @default("#ec4899") // Couleur gradient début (rose par défaut)
  cardColorTo             String   @default("#be185d") // Couleur gradient fin (rose foncé par défaut)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("gift_card_settings")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   // Nom du template (ex: "Promotion du mois")
  subject   String   // Sujet de l'email
  content   String   @db.Text // Contenu de l'email
  category  String?  @default("general") // general, promo, rappel, nouveaute
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

model SocialMediaPost {
  id              String    @id @default(cuid())
  userId          String?   // Propriétaire du post
  socialConfigId  String?   // Compte social media utilisé
  title           String    // Titre/sujet de la publication
  content         String    @db.Text // Texte de la publication
  platform        String?   // Instagram, Facebook, TikTok, etc.
  scheduledDate   DateTime  // Date de publication prévue
  status          String    @default("draft") // draft, scheduled, published, cancelled
  notes           String?   @db.Text // Notes et idées supplémentaires
  links           String?   @db.Text // JSON array de liens utiles
  hashtags        String?   // Hashtags à utiliser
  mediaUrls       String?   @db.Text // JSON array d'URLs des médias (images/vidéos)
  publishedAt     DateTime? // Date de publication effective
  apiPostId       String?   // ID de la publication sur la plateforme
  errorMessage    String?   @db.Text // Message d'erreur en cas d'échec
  instagramType   String?   // post, story, reel
  facebookType    String?   // post, story, reel
  tiktokType      String?   // reel
  category        String?   // conseils, avant-apres, nouveaute, promotion, etc.
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([scheduledDate])
  @@index([status])
  @@index([category])
}

model SocialMediaConfig {
  id                    String    @id @default(cuid())
  userId                String?   // Propriétaire du compte (null = compte global)
  platform              String    // instagram, facebook, tiktok, youtube
  accountName           String?   // Nom du compte/page pour affichage
  accessToken           String?   @db.Text // Token d'accès
  refreshToken          String?   @db.Text // Token de rafraîchissement
  pageId                String?   // ID de la page/compte
  accountId             String?   // ID du compte Instagram/Facebook
  appId                 String?   // App ID Meta
  appSecret             String?   @db.Text // App Secret Meta
  expiresAt             DateTime? // Date d'expiration du token
  enabled               Boolean   @default(false)
  autoPublish           Boolean   @default(false) // Publication automatique activée
  isDefault             Boolean   @default(false) // Compte par défaut pour ce user
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([userId, platform, accountId]) // Un user peut avoir plusieurs comptes par plateforme
  @@index([userId])
  @@index([platform])
}

model WhatsAppConfig {
  id                    String    @id @default(cuid())
  userId                String?   // Propriétaire du compte (null = compte global)
  accountName           String?   // Nom du compte pour affichage
  phoneNumberId         String?   // ID du numéro de téléphone WhatsApp Business
  phoneNumber           String?   // Numéro de téléphone formaté
  accessToken           String?   @db.Text // Token d'accès WhatsApp Business API
  businessAccountId     String?   // ID du compte WhatsApp Business
  appId                 String?   // App ID Meta
  appSecret             String?   @db.Text // App Secret Meta
  webhookVerifyToken    String?   // Token de vérification webhook
  expiresAt             DateTime? // Date d'expiration du token
  enabled               Boolean   @default(false)
  isDefault             Boolean   @default(false) // Compte par défaut pour ce user
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([userId, phoneNumberId])
  @@index([userId])
}

model EmailConfig {
  id                    String    @id @default(cuid())
  userId                String?   // Propriétaire du compte (null = compte global)
  accountName           String?   // Nom du compte pour affichage (ex: "Contact Laia Skin")
  provider              String    // resend, gmail, outlook, etc.
  email                 String    // Adresse email
  apiKey                String?   @db.Text // API Key (pour Resend, SendGrid, etc.)
  password              String?   @db.Text // Mot de passe (pour SMTP)
  smtpHost              String?   // Serveur SMTP
  smtpPort              Int?      // Port SMTP
  imapHost              String?   // Serveur IMAP pour réception
  imapPort              Int?      // Port IMAP
  enabled               Boolean   @default(false)
  isDefault             Boolean   @default(false) // Compte par défaut pour ce user
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([userId, email])
  @@index([userId])
}

model Integration {
  id            String   @id @default(cuid())
  userId        String?  // Propriétaire (null = config globale)
  type          String   // 'stripe', 'google_calendar', 'paypal', 'twilio', etc.
  enabled       Boolean  @default(false)

  // Configuration chiffrée (JSON contenant les clés API, tokens, etc.)
  config        Json     @default("{}")

  // Statut de la connexion
  status        String   @default("disconnected") // disconnected, connected, error, expired
  lastSync      DateTime?
  errorMessage  String?  @db.Text

  // Métadonnées
  displayName   String?  // Nom affiché dans l'interface
  description   String?  @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, type])
  @@index([userId])
  @@index([type])
  @@index([enabled])
}

// Catégories de services (ex: Soins du visage, Soins du corps, Épilation)
model ServiceCategory {
  id            String   @id @default(cuid())
  name          String   // Ex: "Soins du visage"
  slug          String   @unique // Ex: "soins-visage"
  description   String?  @db.Text
  icon          String?  // Ex: "FaFaceSmile" (nom de l'icône React Icons)
  color         String   @default("#e11d48") // Couleur hex pour l'interface
  image         String?  // Image de bannière de la catégorie
  order         Int      @default(0) // Ordre d'affichage
  active        Boolean  @default(true)
  featured      Boolean  @default(false) // Mettre en avant sur la page d'accueil

  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subcategories ServiceSubcategory[]
  services      Service[] @relation("ServiceToCategory")

  @@index([slug])
  @@index([active])
  @@index([order])
}

// Sous-catégories de services (ex: sous "Soins du visage" → HydroFacial, BB Glow)
model ServiceSubcategory {
  id          String   @id @default(cuid())
  categoryId  String
  name        String   // Ex: "Soins anti-âge"
  slug        String   @unique // Ex: "soins-anti-age"
  description String?  @db.Text
  icon        String?  // Icône spécifique
  image       String?  // Image de la sous-catégorie
  order       Int      @default(0)
  active      Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  services    Service[]       @relation("ServiceToSubcategory")

  @@index([categoryId])
  @@index([slug])
  @@index([active])
  @@index([order])
}

// Historique des paiements (tous types confondus)
model Payment {
  id                  String   @id @default(cuid())
  type                String   // "reservation", "order", "giftcard"
  reservationId       String?
  orderId             String?
  giftCardId          String?
  userId              String
  amount              Float
  currency            String   @default("eur")
  status              String   // "pending", "succeeded", "failed", "refunded"
  paymentMethod       String   // "stripe", "cash", "transfer", "check"

  // Stripe specific
  stripePaymentId     String?  @unique // payment_intent_xxx
  stripeSessionId     String?  // checkout_session_xxx
  stripeCustomerId    String?
  stripeChargeId      String?
  stripeFees          Float?   // Frais Stripe

  // Métadonnées
  description         String?
  metadata            String?  // JSON pour infos supplémentaires
  receiptUrl          String?  // URL du reçu Stripe
  invoiceNumber       String?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user                User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([reservationId])
  @@index([orderId])
  @@index([status])
  @@index([paymentMethod])
  @@index([stripePaymentId])
  @@index([createdAt])
}

// ============================================
// SUPER ADMIN MODELS
// ============================================

enum NotificationType {
  TRIAL_EXPIRING_7D      // Essai expire dans 7 jours
  TRIAL_EXPIRING_3D      // Essai expire dans 3 jours
  TRIAL_EXPIRED          // Essai expiré
  LIMIT_REACHED_80       // 80% de la limite atteinte
  LIMIT_REACHED_100      // 100% de la limite atteinte
  PAYMENT_FAILED         // Paiement échoué
  INACTIVE_ORG           // Organisation inactive
  NEW_ORGANIZATION       // Nouvelle organisation créée
  CANCELLED_SUBSCRIPTION // Abonnement annulé
}

model SuperAdminNotification {
  id             String           @id @default(cuid())
  type           NotificationType
  title          String
  message        String           @db.Text
  organizationId String?
  userId         String?
  read           Boolean          @default(false)
  actionUrl      String?
  metadata       Json?            // Données additionnelles
  createdAt      DateTime         @default(now())

  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([read])
  @@index([type])
  @@index([organizationId])
  @@index([createdAt])
}

enum AuditAction {
  CREATE_ORG
  UPDATE_ORG
  DELETE_ORG
  SUSPEND_ORG
  ACTIVATE_ORG
  CANCEL_ORG
  CHANGE_PLAN
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  IMPERSONATE
  END_IMPERSONATE
  CREATE_LOCATION
  UPDATE_LOCATION
  DELETE_LOCATION
  UPDATE_SETTINGS
  RESET_PASSWORD
}

model AuditLog {
  id             String       @id @default(cuid())
  userId         String       // Super admin qui a fait l'action
  action         AuditAction
  targetType     String       // ORGANIZATION, USER, LOCATION, etc.
  targetId       String?
  organizationId String?
  before         Json?        // État avant (pour updates)
  after          Json?        // État après (pour updates)
  ipAddress      String?
  userAgent      String?
  metadata       Json?        // Données additionnelles
  createdAt      DateTime     @default(now())

  user           User         @relation(fields: [userId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([targetType])
  @@index([organizationId])
  @@index([createdAt])
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  MANUAL
  BANK_TRANSFER
  PAYPAL
}

model Invoice {
  id                     String        @id @default(cuid())
  organizationId         String
  invoiceNumber          String        @unique // LAIA-2025-001234
  amount                 Float
  currency               String        @default("EUR")
  plan                   String?       // SOLO, DUO, TEAM, PREMIUM
  status                 InvoiceStatus @default(PENDING)
  stripeInvoiceId        String?       @unique
  stripePaymentIntentId  String?       // ID du PaymentIntent Stripe
  paidAt                 DateTime?
  issueDate              DateTime      @default(now()) // Date d'émission
  dueDate                DateTime
  description            String?
  pdfPath                String?       // Chemin vers le PDF
  metadata               Json?         // Détails additionnels
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  payments        BillingPayment[]

  @@index([organizationId])
  @@index([invoiceNumber])
  @@index([status])
  @@index([dueDate])
  @@index([createdAt])
}

model BillingPayment {
  id              String        @id @default(cuid())
  invoiceId       String
  amount          Float
  method          PaymentMethod
  stripePaymentId String?       @unique
  status          InvoiceStatus
  metadata        Json?         // Détails additionnels
  createdAt       DateTime      @default(now())

  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([status])
  @@index([createdAt])
}

// Configuration des factures LAIA (paramètres globaux)
model InvoiceSettings {
  id              String   @id @default(cuid())

  // Informations émetteur (LAIA)
  companyName     String   @default("LAIA SAS")
  address         String   @default("123 Avenue de la Beauté")
  postalCode      String   @default("75001")
  city            String   @default("Paris")
  country         String   @default("France")
  siret           String   @default("123 456 789 00012")
  tvaNumber       String   @default("FR12345678900")
  capitalSocial   String   @default("10 000€")
  rcs             String   @default("RCS Paris 123 456 789")

  // Contact
  email           String   @default("contact@laia.com")
  phone           String?  @default("+33 1 23 45 67 89")
  website         String?  @default("https://laia.com")

  // Design
  logoUrl         String?  // URL du logo
  primaryColor    String   @default("#667eea") // Violet
  secondaryColor  String   @default("#764ba2") // Rose

  // Paramètres facture
  invoicePrefix   String   @default("LAIA") // LAIA-2025-001234
  tvaRate         Float    @default(20.0) // Taux TVA en %

  // Mentions légales
  paymentTerms    String   @default("Prélèvement SEPA automatique")
  latePenalty     String   @default("En cas de retard de paiement, indemnité forfaitaire de 40€ pour frais de recouvrement.")
  footerText      String?  @default("TVA intracommunautaire: FR12345678900")

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum SuperAdminEmailKey {
  WELCOME
  TRIAL_ENDING_7D
  TRIAL_ENDING_3D
  TRIAL_EXPIRED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  LIMIT_REACHED
  NEWSLETTER
  PASSWORD_RESET
}

model SuperAdminEmailTemplate {
  id          String              @id @default(cuid())
  key         SuperAdminEmailKey  @unique
  name        String
  subject     String
  htmlBody    String              @db.Text
  textBody    String?             @db.Text
  variables   Json                // Liste des variables disponibles
  active      Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@index([key])
  @@index([active])
}

model PlatformConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String   // User ID du super admin

  @@index([key])
}

// ============================================
// SUPER ADMIN - SUPPORT
// ============================================

// Tickets de support
enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  TECHNICAL       // Problème technique
  BILLING         // Facturation
  FEATURE_REQUEST // Demande de fonctionnalité
  QUESTION        // Question
  BUG             // Bug
  OTHER           // Autre
}

model SupportTicket {
  id              String          @id @default(cuid())
  ticketNumber    String          @unique // #TICKET-001
  subject         String
  description     String          @db.Text
  status          TicketStatus    @default(OPEN)
  priority        TicketPriority  @default(MEDIUM)
  category        TicketCategory
  organizationId  String
  createdById     String          // User qui a créé le ticket
  assignedToId    String?         // Super admin assigné
  resolvedAt      DateTime?
  closedAt        DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy       User            @relation("TicketCreator", fields: [createdById], references: [id])
  assignedTo      User?           @relation("TicketAssignee", fields: [assignedToId], references: [id])
  messages        TicketMessage[]

  @@index([ticketNumber])
  @@index([status])
  @@index([priority])
  @@index([organizationId])
  @@index([assignedToId])
  @@index([createdAt])
}

model TicketMessage {
  id              String          @id @default(cuid())
  ticketId        String
  authorId        String
  message         String          @db.Text
  attachments     Json?           // URLs des fichiers
  isInternal      Boolean         @default(false) // Note interne (non visible par le client)
  createdAt       DateTime        @default(now())

  ticket          SupportTicket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author          User            @relation(fields: [authorId], references: [id])

  @@index([ticketId])
  @@index([createdAt])
}

// ============================================
// PRIORITÉ 2 - SUPER ADMIN FEATURES
// ============================================

// Codes promo pour les abonnements LAIA
enum SubscriptionPromoType {
  PERCENTAGE  // Réduction en pourcentage
  FIXED       // Montant fixe
  FREE_TRIAL  // Essai gratuit prolongé
}

enum SubscriptionPromoStatus {
  ACTIVE      // Actif
  EXPIRED     // Expiré
  DISABLED    // Désactivé
}

model SubscriptionPromoCode {
  id              String                    @id @default(cuid())
  code            String                    @unique // "LAIA2025"
  description     String?                   // "Promotion lancement 2025"
  type            SubscriptionPromoType
  value           Float                     // 20 (pour 20%) ou 50 (pour 50€)

  // Applicabilité
  targetPlans     String[]                  // ["SOLO", "DUO"] ou [] pour tous
  maxUses         Int?                      // Nombre max d'utilisations (null = illimité)
  currentUses     Int                       @default(0)

  // Dates de validité
  validFrom       DateTime                  @default(now())
  validUntil      DateTime?

  status          SubscriptionPromoStatus   @default(ACTIVE)

  // Utilisation
  usedBy          Organization[]            @relation("SubscriptionPromoUsage")

  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@index([code])
  @@index([status])
  @@index([validFrom])
  @@index([validUntil])
}

// Témoignages clients pour le marketing
enum TestimonialStatus {
  PENDING   // En attente d'approbation
  APPROVED  // Approuvé et visible
  REJECTED  // Rejeté
}

model Testimonial {
  id              String              @id @default(cuid())

  // Client
  clientName      String              // "Marie Dupont"
  clientRole      String?             // "Gérante, Beauté Éternelle Paris"
  clientPhoto     String?             // URL de la photo
  organizationId  String?             // Lien vers l'organisation (optionnel)

  // Contenu
  content         String              @db.Text
  rating          Int                 @default(5) // 1-5 étoiles

  // Métadonnées
  status          TestimonialStatus   @default(PENDING)
  featured        Boolean             @default(false) // Mis en avant
  showOnLanding   Boolean             @default(false) // Afficher sur la page d'accueil

  // Tags pour filtrer
  tags            String[]            // ["onboarding", "support", "features"]

  organization    Organization?       @relation("OrganizationTestimonials", fields: [organizationId], references: [id], onDelete: SetNull)

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([status])
  @@index([featured])
  @@index([showOnLanding])
  @@index([organizationId])
}

// Notifications push pour les organisations
enum PushNotificationStatus {
  SCHEDULED   // Programmée
  SENT        // Envoyée
  FAILED      // Échec
}

model PushNotification {
  id              String                    @id @default(cuid())
  title           String
  body            String                    @db.Text
  icon            String?
  url             String?                   // URL de redirection au clic

  // Ciblage
  targetAll       Boolean                   @default(false)
  targetPlans     String[]                  // ["SOLO", "DUO"]
  targetOrgs      String[]                  // IDs des organisations ciblées

  // Programmation
  scheduledAt     DateTime?
  sentAt          DateTime?
  status          PushNotificationStatus    @default(SCHEDULED)

  // Statistiques
  totalSent       Int                       @default(0)
  totalClicked    Int                       @default(0)

  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  @@index([status])
  @@index([scheduledAt])
  @@index([sentAt])
}

// ============================================
// CRM & PROSPECTION MODELS
// ============================================

enum LeadStatus {
  NEW                 // Nouveau lead (découverte)
  CONTACTED           // Premier contact effectué
  QUALIFIED           // Prospect qualifié (intéressé)
  DEMO_SCHEDULED      // Démo planifiée
  DEMO_DONE           // Démo effectuée
  PROPOSAL_SENT       // Proposition commerciale envoyée
  NEGOTIATION         // En négociation
  WON                 // Gagné → converti en client
  LOST                // Perdu
  ON_HOLD             // En attente
}

enum LeadSource {
  WEBSITE             // Formulaire site web
  REFERRAL            // Recommandation
  LINKEDIN            // LinkedIn
  INSTAGRAM           // Instagram
  FACEBOOK            // Facebook
  GOOGLE_ADS          // Google Ads
  EMAIL_CAMPAIGN      // Campagne email
  COLD_EMAIL          // Email à froid
  COLD_CALL           // Appel à froid
  NETWORKING          // Networking/Salon professionnel
  PARTNER             // Partenaire commercial
  OTHER               // Autre
}

enum InteractionType {
  EMAIL
  PHONE
  MEETING
  DEMO
  WHATSAPP
  LINKEDIN_MESSAGE
  NOTE
}

model Lead {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Informations institut
  institutName      String
  contactName       String
  contactEmail      String
  contactPhone      String?
  website           String?
  address           String?
  city              String?
  postalCode        String?
  country           String        @default("France")

  // Informations business
  numberOfLocations Int           @default(1)
  numberOfEmployees Int?
  currentSoftware   String?       // Logiciel actuel utilisé
  estimatedRevenue  Decimal?      @db.Decimal(10, 2)
  painPoints        String[]      // Points de douleur

  // Pipeline
  status            LeadStatus    @default(NEW)
  source            LeadSource
  score             Int           @default(0)  // Score de qualité 0-100
  probability       Int           @default(0)  // Probabilité de conversion 0-100%
  estimatedValue    Decimal?      @db.Decimal(10, 2)

  // Suivi commercial
  assignedToUserId  String?
  assignedTo        User?         @relation(fields: [assignedToUserId], references: [id])
  nextFollowUpDate  DateTime?
  lastContactDate   DateTime?
  expectedCloseDate DateTime?

  // Conversion
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id])
  convertedAt       DateTime?
  lostReason        String?

  // Métadonnées
  tags              String[]
  notes             String?       @db.Text

  interactions      LeadInteraction[]
  demoBooking       DemoBooking?  @relation("DemoBookingLead")

  @@index([status])
  @@index([assignedToUserId])
  @@index([source])
  @@index([nextFollowUpDate])
  @@index([contactEmail])
  @@index([city])
}

model LeadInteraction {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())

  leadId          String
  lead            Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)

  userId          String
  user            User            @relation(fields: [userId], references: [id])

  type            InteractionType
  subject         String?
  content         String          @db.Text
  nextAction      String?
  nextActionDate  DateTime?

  // Pièces jointes
  attachments     String[]

  @@index([leadId])
  @@index([userId])
  @@index([createdAt])
}

model ProspectingEmailTemplate {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String
  subject     String
  body        String    @db.Text  // HTML avec variables {{institutName}}, {{contactName}}, etc.
  category    String?               // 'first_contact', 'follow_up', 'demo', 'proposal', etc.
  isActive    Boolean   @default(true)
}

// Système de calendrier pour les démos commerciales
model DemoSlot {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  date          DateTime  // Date et heure du créneau
  duration      Int       @default(30) // Durée en minutes
  userId        String?   // Commercial assigné (super-admin)
  user          User?     @relation("DemoSlots", fields: [userId], references: [id])

  isAvailable   Boolean   @default(true)
  isRecurring   Boolean   @default(false) // Créneau récurrent chaque semaine
  dayOfWeek     Int?      // 0=Dimanche, 1=Lundi, etc. (pour récurrence)

  bookings      DemoBooking[]
}

model DemoBooking {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  slotId        String
  slot          DemoSlot  @relation(fields: [slotId], references: [id], onDelete: Cascade)

  // Informations du prospect
  institutName  String
  contactName   String
  contactEmail  String
  contactPhone  String?
  message       String?   @db.Text

  // Lead associé
  leadId        String?   @unique
  lead          Lead?     @relation("DemoBookingLead", fields: [leadId], references: [id])

  // Type de rendez-vous
  type          String    @default("ONLINE") // ONLINE (visio) ou PHYSICAL (physique)
  location      String?   // Adresse si rendez-vous physique

  status        String    @default("CONFIRMED") // CONFIRMED, COMPLETED, CANCELLED, NO_SHOW
  meetingUrl    String?   // URL visio si démo en ligne
  notes         String?   @db.Text

  reminderSent  Boolean   @default(false)
  completedAt   DateTime?
  cancelledAt   DateTime?
}

// ============================================
// PLATFORM NEWS - NOUVEAUTÉS LAIA BEAUTY
// ============================================

enum PlatformNewsStatus {
  DRAFT       // Brouillon
  PUBLISHED   // Publié
  ARCHIVED    // Archivé
}

model PlatformNews {
  id              String              @id @default(cuid())
  title           String
  slug            String              @unique
  excerpt         String              @db.Text
  content         String              @db.Text
  category        String              // "Nouvelle fonctionnalité", "Mise à jour", "Conseil", etc.
  status          PlatformNewsStatus  @default(DRAFT)

  featuredImage   String?
  tags            Json?               // ["automatisation", "réservation", "IA"]

  // SEO
  seoTitle        String?
  seoDescription  String?

  // Author (Super Admin)
  authorId        String
  author          User                @relation(fields: [authorId], references: [id])

  publishedAt     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([status])
  @@index([publishedAt])
  @@index([category])
  @@index([authorId])
}

