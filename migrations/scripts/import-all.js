#!/usr/bin/env node

/**
 * üöÄ SCRIPT DE MIGRATION COMPLET
 *
 * Ce script importe toutes les donn√©es d'un institut dans l'ordre correct.
 *
 * USAGE:
 *   node migrations/scripts/import-all.js <organizationId>
 *
 * EXEMPLE:
 *   node migrations/scripts/import-all.js cmgyi476b0000bla76887z7d6
 */

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

// R√©cup√©rer l'organizationId depuis les arguments
const ORGANIZATION_ID = process.argv[2];

if (!ORGANIZATION_ID) {
  console.error('‚ùå Erreur : Vous devez fournir un organizationId');
  console.log('Usage: node migrations/scripts/import-all.js <organizationId>');
  process.exit(1);
}

// Ordre d'import (important : respecter les d√©pendances)
const IMPORT_ORDER = [
  { name: '1-clients', label: 'Clients', script: './1-import-clients.js' },
  { name: '2-services', label: 'Services', script: './2-import-services.js' },
  { name: '3-employees', label: 'Employ√©s', script: './3-import-employees.js' },
  { name: '4-reservations', label: 'R√©servations', script: './4-import-reservations.js' },
  { name: '5-gift-cards', label: 'Cartes cadeaux', script: './5-import-gift-cards.js' },
  { name: '6-products', label: 'Produits', script: './6-import-products.js' },
  { name: '7-loyalty-points', label: 'Points de fid√©lit√©', script: './7-import-loyalty.js' },
  { name: '8-payments', label: 'Historique paiements', script: './8-import-payments.js' }
];

async function main() {
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë   üöÄ MIGRATION COMPL√àTE DES DONN√âES      ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

  console.log(`üìã Organization ID: ${ORGANIZATION_ID}\n`);

  // V√©rifier que l'organization existe
  const org = await prisma.organization.findUnique({
    where: { id: ORGANIZATION_ID },
    select: { id: true, name: true }
  });

  if (!org) {
    console.error(`‚ùå Organisation introuvable : ${ORGANIZATION_ID}`);
    process.exit(1);
  }

  console.log(`‚úÖ Organisation trouv√©e : ${org.name}\n`);
  console.log('‚îÄ'.repeat(50) + '\n');

  const startTime = Date.now();
  const results = [];

  for (const step of IMPORT_ORDER) {
    console.log(`\nüì¶ Import ${step.label}...`);
    console.log('‚îÄ'.repeat(50));

    const scriptPath = path.join(__dirname, step.script);

    if (!fs.existsSync(scriptPath)) {
      console.log(`‚ö†Ô∏è  Script non trouv√©, ignor√©: ${step.script}`);
      results.push({ step: step.label, status: 'skipped', count: 0 });
      continue;
    }

    try {
      // Ex√©cuter le script d'import
      const importFn = require(scriptPath);
      const result = await importFn(ORGANIZATION_ID, prisma);

      results.push({
        step: step.label,
        status: 'success',
        count: result.imported || 0,
        errors: result.errors || 0
      });

      console.log(`‚úÖ ${step.label} : ${result.imported || 0} import√©s, ${result.errors || 0} erreurs`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'import ${step.label}:`, error.message);
      results.push({ step: step.label, status: 'error', error: error.message });
    }
  }

  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);

  // R√©sum√© final
  console.log('\n\n');
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë          üìä R√âSUM√â DE LA MIGRATION         ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

  results.forEach(r => {
    const icon = r.status === 'success' ? '‚úÖ' : r.status === 'error' ? '‚ùå' : '‚ö†Ô∏è ';
    const count = r.count !== undefined ? ` (${r.count} √©l√©ments)` : '';
    console.log(`${icon} ${r.step}${count}`);
  });

  console.log(`\n‚è±Ô∏è  Dur√©e totale : ${duration}s`);
  console.log('\n‚ú® Migration termin√©e !\n');

  await prisma.$disconnect();
}

main().catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  prisma.$disconnect();
  process.exit(1);
});
