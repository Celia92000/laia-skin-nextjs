import { getPrismaClient } from './src/lib/prisma';

async function finalLoyaltyCheck() {
  const prisma = await getPrismaClient();
  
  try {
    console.log("âœ… VÃ‰RIFICATION FINALE DU SYSTÃˆME DE FIDÃ‰LITÃ‰");
    console.log("=" .repeat(80));
    
    // RÃ©cupÃ©rer tous les profils de fidÃ©litÃ© avec rÃ©ductions disponibles
    const eligibleProfiles = await prisma.loyaltyProfile.findMany({
      where: {
        OR: [
          { individualServicesCount: { gte: 5 } },
          { packagesCount: { gte: 3 } }
        ]
      },
      include: {
        user: true
      },
      orderBy: [
        { individualServicesCount: 'desc' },
        { packagesCount: 'desc' }
      ]
    });
    
    console.log(`\nðŸŽ‰ ${eligibleProfiles.length} CLIENT(S) AVEC RÃ‰DUCTIONS DISPONIBLES:`);
    console.log("=" .repeat(80));
    
    for (const profile of eligibleProfiles) {
      console.log(`\nðŸ‘¤ ${profile.user.name} (${profile.user.email})`);
      
      if (profile.individualServicesCount >= 5) {
        console.log(`   âœ¨ SOINS: ${profile.individualServicesCount}/5`);
        console.log(`      â†’ RÃ‰DUCTION DE 20â‚¬ DISPONIBLE!`);
      }
      
      if (profile.packagesCount >= 3) {
        console.log(`   ðŸ“¦ FORFAITS: ${profile.packagesCount}/3`);
        console.log(`      â†’ RÃ‰DUCTION DE 30â‚¬ DISPONIBLE!`);
      }
      
      console.log(`   ðŸ’° Total dÃ©pensÃ©: ${profile.totalSpent}â‚¬`);
    }
    
    // VÃ©rifier spÃ©cifiquement CÃ©lia Ivorra
    console.log("\n" + "=" .repeat(80));
    console.log("ðŸŽ¯ FOCUS SUR CÃ‰LIA IVORRA");
    console.log("=" .repeat(80));
    
    const celia = await prisma.user.findFirst({
      where: { email: 'celia.ivorra95@hotmail.fr' },
      include: {
        loyaltyProfile: true,
        reservations: {
          where: { 
            date: {
              gte: new Date('2025-09-27T00:00:00Z'),
              lt: new Date('2025-09-28T00:00:00Z')
            }
          },
          orderBy: { time: 'asc' }
        }
      }
    });
    
    if (celia && celia.loyaltyProfile) {
      console.log(`\nâœ… Profil de CÃ©lia Ivorra:`);
      console.log(`   âœ¨ Soins individuels: ${celia.loyaltyProfile.individualServicesCount}/5`);
      console.log(`   ðŸ“¦ Forfaits: ${celia.loyaltyProfile.packagesCount}/3`);
      
      const reductions = [];
      if (celia.loyaltyProfile.individualServicesCount >= 5) {
        reductions.push("SOINS (-20â‚¬)");
      }
      if (celia.loyaltyProfile.packagesCount >= 3) {
        reductions.push("FORFAITS (-30â‚¬)");
      }
      
      if (reductions.length > 0) {
        console.log(`\n   ðŸŽ‰ RÃ‰DUCTIONS DISPONIBLES: ${reductions.join(' ET ')}`);
      }
      
      if (celia.reservations.length > 0) {
        console.log(`\n   ðŸ“… RÃ©servations de CÃ©lia pour demain (27/09):`);
        for (const res of celia.reservations) {
          const services = typeof res.services === 'string' ? JSON.parse(res.services) : res.services;
          const packages = res.packages ? 
            (typeof res.packages === 'string' ? JSON.parse(res.packages) : res.packages) : null;
          
          const type = packages && Object.keys(packages).length > 0 ? 'FORFAIT' : 'SOIN';
          const reduction = type === 'FORFAIT' ? 
            (celia.loyaltyProfile.packagesCount >= 3 ? '-30â‚¬' : 'Pas de rÃ©duction') :
            (celia.loyaltyProfile.individualServicesCount >= 5 ? '-20â‚¬' : 'Pas de rÃ©duction');
          
          console.log(`      - ${res.time} : ${services.join(', ')} (${type})`);
          console.log(`        Prix: ${res.totalPrice}â‚¬ â†’ RÃ©duction: ${reduction}`);
        }
      }
    }
    
    // Instructions
    console.log("\n" + "=" .repeat(80));
    console.log("ðŸ“‹ SYSTÃˆME DE FIDÃ‰LITÃ‰ - RÃ‰CAPITULATIF");
    console.log("=" .repeat(80));
    
    console.log("\nâœ… RÃˆGLES:");
    console.log("   â€¢ 5 soins individuels = RÃ©duction de 20â‚¬");
    console.log("   â€¢ 3 forfaits = RÃ©duction de 30â‚¬");
    console.log("   â€¢ Les compteurs se remettent Ã  0 aprÃ¨s utilisation de la rÃ©duction");
    console.log("   â€¢ Les rÃ©ductions sont automatiquement proposÃ©es lors du paiement");
    
    console.log("\nâœ… FONCTIONNEMENT:");
    console.log("   1. Le compteur augmente Ã  chaque soin/forfait marquÃ© comme 'completed'");
    console.log("   2. Ã€ 5 soins ou 3 forfaits, la rÃ©duction devient disponible");
    console.log("   3. Lors du paiement, la rÃ©duction est prÃ©-cochÃ©e automatiquement");
    console.log("   4. AprÃ¨s utilisation, le compteur correspondant revient Ã  0");
    
    console.log("\nâœ… TEST:");
    console.log("   1. Allez dans l'admin: http://localhost:3001/admin");
    console.log("   2. Onglet 'Gestion des soins'");
    console.log("   3. Trouvez un client avec 5+ soins ou 3+ forfaits");
    console.log("   4. Cliquez 'Enregistrer le paiement'");
    console.log("   5. La rÃ©duction apparaÃ®t automatiquement!");
    
    console.log("\nðŸŽ‰ SYSTÃˆME OPÃ‰RATIONNEL POUR TOUS LES CLIENTS!");
    
  } catch (error) {
    console.error("Erreur:", error);
  } finally {
    await prisma.$disconnect();
  }
}

finalLoyaltyCheck();