/**
 * Script pour ajouter les colonnes de features et templates √† la base de donn√©es
 * Utilise du SQL brut pour √©viter les timeouts Prisma
 */

import { prisma } from '../src/lib/prisma'

async function addFeatureColumns() {
  console.log('\nüîß AJOUT DES COLONNES FEATURES ET TEMPLATES\n')
  console.log('='.repeat(60))

  try {
    // 1. Ajouter les colonnes de features √† Organization
    console.log('\nüì¶ Ajout des colonnes features √† Organization...')

    const featureColumns = [
      'featureBlog BOOLEAN DEFAULT false',
      'featureProducts BOOLEAN DEFAULT false',
      'featureCRM BOOLEAN DEFAULT false',
      'featureStock BOOLEAN DEFAULT false',
      'featureFormations BOOLEAN DEFAULT false',
    ]

    for (const column of featureColumns) {
      const columnName = column.split(' ')[0]
      try {
        await prisma.$executeRawUnsafe(`
          ALTER TABLE "Organization"
          ADD COLUMN IF NOT EXISTS "${columnName}" BOOLEAN DEFAULT false;
        `)
        console.log(`   ‚úÖ ${columnName} ajout√©`)
      } catch (error: any) {
        if (error.message.includes('already exists')) {
          console.log(`   ‚ö†Ô∏è  ${columnName} existe d√©j√†`)
        } else {
          console.log(`   ‚ùå Erreur ${columnName}:`, error.message)
        }
      }
    }

    // 2. Ajouter templateSourceId et isCustomized √† Service
    console.log('\nüìù Ajout colonnes template √† Service...')

    try {
      await prisma.$executeRawUnsafe(`
        ALTER TABLE "Service"
        ADD COLUMN IF NOT EXISTS "templateSourceId" TEXT,
        ADD COLUMN IF NOT EXISTS "isCustomized" BOOLEAN DEFAULT false;
      `)
      console.log('   ‚úÖ Colonnes template ajout√©es √† Service')
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('   ‚ö†Ô∏è  Colonnes template existent d√©j√† dans Service')
      } else {
        console.log('   ‚ùå Erreur:', error.message)
      }
    }

    // 3. Ajouter templateSourceId et isCustomized √† Product
    console.log('\nüõçÔ∏è  Ajout colonnes template √† Product...')

    try {
      await prisma.$executeRawUnsafe(`
        ALTER TABLE "Product"
        ADD COLUMN IF NOT EXISTS "templateSourceId" TEXT,
        ADD COLUMN IF NOT EXISTS "isCustomized" BOOLEAN DEFAULT false;
      `)
      console.log('   ‚úÖ Colonnes template ajout√©es √† Product')
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('   ‚ö†Ô∏è  Colonnes template existent d√©j√† dans Product')
      } else {
        console.log('   ‚ùå Erreur:', error.message)
      }
    }

    // 4. Ajouter templateSourceId et isCustomized √† BlogPost
    console.log('\nüì∞ Ajout colonnes template √† BlogPost...')

    try {
      await prisma.$executeRawUnsafe(`
        ALTER TABLE "BlogPost"
        ADD COLUMN IF NOT EXISTS "templateSourceId" TEXT,
        ADD COLUMN IF NOT EXISTS "isCustomized" BOOLEAN DEFAULT false;
      `)
      console.log('   ‚úÖ Colonnes template ajout√©es √† BlogPost')
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('   ‚ö†Ô∏è  Colonnes template existent d√©j√† dans BlogPost')
      } else {
        console.log('   ‚ùå Erreur:', error.message)
      }
    }

    // 5. Ajouter templateSourceId, isCustomized et organizationId √† Formation
    console.log('\nüéì Ajout colonnes template √† Formation...')

    try {
      await prisma.$executeRawUnsafe(`
        ALTER TABLE "Formation"
        ADD COLUMN IF NOT EXISTS "templateSourceId" TEXT,
        ADD COLUMN IF NOT EXISTS "isCustomized" BOOLEAN DEFAULT false,
        ADD COLUMN IF NOT EXISTS "organizationId" TEXT;
      `)
      console.log('   ‚úÖ Colonnes template ajout√©es √† Formation')

      // Cr√©er l'index
      await prisma.$executeRawUnsafe(`
        CREATE INDEX IF NOT EXISTS "Formation_organizationId_idx"
        ON "Formation"("organizationId");
      `)
      console.log('   ‚úÖ Index organizationId cr√©√©')
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('   ‚ö†Ô∏è  Colonnes template existent d√©j√† dans Formation')
      } else {
        console.log('   ‚ùå Erreur:', error.message)
      }
    }

    // 6. Ajouter customizedFields √† OrganizationConfig
    console.log('\n‚öôÔ∏è  Ajout customizedFields √† OrganizationConfig...')

    try {
      await prisma.$executeRawUnsafe(`
        ALTER TABLE "OrganizationConfig"
        ADD COLUMN IF NOT EXISTS "customizedFields" TEXT DEFAULT '{}';
      `)
      console.log('   ‚úÖ customizedFields ajout√© √† OrganizationConfig')
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('   ‚ö†Ô∏è  customizedFields existe d√©j√† dans OrganizationConfig')
      } else {
        console.log('   ‚ùå Erreur:', error.message)
      }
    }

    // 7. Ajouter addons √† Organization
    console.log('\nüíé Ajout addons √† Organization...')

    try {
      await prisma.$executeRawUnsafe(`
        ALTER TABLE "Organization"
        ADD COLUMN IF NOT EXISTS "addons" TEXT DEFAULT '{}';
      `)
      console.log('   ‚úÖ addons ajout√© √† Organization')
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('   ‚ö†Ô∏è  addons existe d√©j√† dans Organization')
      } else {
        console.log('   ‚ùå Erreur:', error.message)
      }
    }

    // 8. Ajouter champs design avanc√© √† OrganizationConfig
    console.log('\nüé® Ajout champs design avanc√© √† OrganizationConfig...')

    try {
      await prisma.$executeRawUnsafe(`
        ALTER TABLE "OrganizationConfig"
        ADD COLUMN IF NOT EXISTS "homeTemplate" TEXT DEFAULT 'classic',
        ADD COLUMN IF NOT EXISTS "homeSections" TEXT DEFAULT '[]',
        ADD COLUMN IF NOT EXISTS "footerConfig" TEXT DEFAULT '{}',
        ADD COLUMN IF NOT EXISTS "extendedColors" TEXT DEFAULT '{}';
      `)
      console.log('   ‚úÖ Champs design avanc√© ajout√©s √† OrganizationConfig')
    } catch (error: any) {
      if (error.message.includes('already exists')) {
        console.log('   ‚ö†Ô∏è  Champs design existent d√©j√† dans OrganizationConfig')
      } else {
        console.log('   ‚ùå Erreur:', error.message)
      }
    }

    console.log('\n' + '='.repeat(60))
    console.log('‚úÖ MIGRATION TERMIN√âE AVEC SUCC√àS !\n')

  } catch (error) {
    console.error('\n‚ùå ERREUR GLOBALE:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter
addFeatureColumns()
  .then(() => {
    console.log('‚úÖ Script termin√©')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå √âchec du script:', error)
    process.exit(1)
  })
