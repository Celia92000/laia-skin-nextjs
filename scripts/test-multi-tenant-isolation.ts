/**
 * TEST CRITIQUE : Isolation Multi-Tenant
 *
 * V√©rifie qu'une organisation ne peut PAS acc√©der aux donn√©es d'une autre
 *
 * Ce test est BLOQUANT avant mise en production
 */

import { prisma } from '../src/lib/prisma'

interface TestResult {
  test: string
  passed: boolean
  details: string
}

const results: TestResult[] = []

async function testIsolation() {
  console.log('üß™ D√âBUT DES TESTS D\'ISOLATION MULTI-TENANT\n')
  console.log('='.repeat(60))

  try {
    // ============================================
    // 1. V√âRIFIER QU'ON A AU MOINS 2 ORGANISATIONS
    // ============================================
    console.log('\nüìä √âtape 1: V√©rification des organisations...')

    const orgs = await prisma.organization.findMany({
      take: 2,
      include: {
        users: { take: 1 },
        services: { take: 1 },
        products: { take: 1 },
        blogPosts: { take: 1 }
      }
    })

    if (orgs.length < 2) {
      console.log('‚ùå ERREUR: Moins de 2 organisations trouv√©es')
      console.log('   Cr√©ez au moins 2 organisations pour tester l\'isolation')
      return
    }

    const [orgA, orgB] = orgs
    console.log(`‚úÖ Organisation A: ${orgA.name} (${orgA.id})`)
    console.log(`‚úÖ Organisation B: ${orgB.name} (${orgB.id})`)

    // ============================================
    // 2. TEST: Services isol√©s
    // ============================================
    console.log('\nüîí Test 2: Isolation des Services')

    const servicesOrgA = await prisma.service.findMany({
      where: { organizationId: orgA.id }
    })

    const servicesOrgB = await prisma.service.findMany({
      where: { organizationId: orgB.id }
    })

    // V√©rifier qu'aucun service de B n'a l'ID de A
    const leakedServices = servicesOrgB.filter(s => s.organizationId === orgA.id)

    if (leakedServices.length === 0) {
      console.log(`‚úÖ PASS√â: Services correctement isol√©s`)
      console.log(`   Org A: ${servicesOrgA.length} services`)
      console.log(`   Org B: ${servicesOrgB.length} services`)
      results.push({ test: 'Isolation Services', passed: true, details: 'OK' })
    } else {
      console.log(`‚ùå √âCHEC: ${leakedServices.length} services de A visibles dans B`)
      results.push({ test: 'Isolation Services', passed: false, details: `${leakedServices.length} fuites` })
    }

    // ============================================
    // 3. TEST: Clients/Utilisateurs isol√©s
    // ============================================
    console.log('\nüîí Test 3: Isolation des Clients')

    const clientsOrgA = await prisma.user.findMany({
      where: {
        organizationId: orgA.id,
        role: 'CLIENT'
      }
    })

    const clientsOrgB = await prisma.user.findMany({
      where: {
        organizationId: orgB.id,
        role: 'CLIENT'
      }
    })

    const leakedClients = clientsOrgB.filter(c => c.organizationId === orgA.id)

    if (leakedClients.length === 0) {
      console.log(`‚úÖ PASS√â: Clients correctement isol√©s`)
      console.log(`   Org A: ${clientsOrgA.length} clients`)
      console.log(`   Org B: ${clientsOrgB.length} clients`)
      results.push({ test: 'Isolation Clients', passed: true, details: 'OK' })
    } else {
      console.log(`‚ùå √âCHEC: ${leakedClients.length} clients de A visibles dans B`)
      results.push({ test: 'Isolation Clients', passed: false, details: `${leakedClients.length} fuites` })
    }

    // ============================================
    // 4. TEST: R√©servations isol√©es
    // ============================================
    console.log('\nüîí Test 4: Isolation des R√©servations')

    const reservationsOrgA = await prisma.reservation.findMany({
      where: { organizationId: orgA.id }
    })

    const reservationsOrgB = await prisma.reservation.findMany({
      where: { organizationId: orgB.id }
    })

    const leakedReservations = reservationsOrgB.filter(r => r.organizationId === orgA.id)

    if (leakedReservations.length === 0) {
      console.log(`‚úÖ PASS√â: R√©servations correctement isol√©es`)
      console.log(`   Org A: ${reservationsOrgA.length} r√©servations`)
      console.log(`   Org B: ${reservationsOrgB.length} r√©servations`)
      results.push({ test: 'Isolation R√©servations', passed: true, details: 'OK' })
    } else {
      console.log(`‚ùå √âCHEC: ${leakedReservations.length} r√©servations de A visibles dans B`)
      results.push({ test: 'Isolation R√©servations', passed: false, details: `${leakedReservations.length} fuites` })
    }

    // ============================================
    // 5. TEST: Produits isol√©s
    // ============================================
    console.log('\nüîí Test 5: Isolation des Produits')

    const productsOrgA = await prisma.product.findMany({
      where: { organizationId: orgA.id }
    })

    const productsOrgB = await prisma.product.findMany({
      where: { organizationId: orgB.id }
    })

    const leakedProducts = productsOrgB.filter(p => p.organizationId === orgA.id)

    if (leakedProducts.length === 0) {
      console.log(`‚úÖ PASS√â: Produits correctement isol√©s`)
      console.log(`   Org A: ${productsOrgA.length} produits`)
      console.log(`   Org B: ${productsOrgB.length} produits`)
      results.push({ test: 'Isolation Produits', passed: true, details: 'OK' })
    } else {
      console.log(`‚ùå √âCHEC: ${leakedProducts.length} produits de A visibles dans B`)
      results.push({ test: 'Isolation Produits', passed: false, details: `${leakedProducts.length} fuites` })
    }

    // ============================================
    // 6. TEST: Configuration isol√©e
    // ============================================
    console.log('\nüîí Test 6: Isolation des Configurations')

    const configOrgA = await prisma.organizationConfig.findUnique({
      where: { organizationId: orgA.id }
    })

    const configOrgB = await prisma.organizationConfig.findUnique({
      where: { organizationId: orgB.id }
    })

    // V√©rifier que les configs sont diff√©rentes ET pas partag√©es
    if (!configOrgA && !configOrgB) {
      console.log(`‚ö†Ô∏è  Les deux organisations n'ont pas de config`)
      console.log(`   Pas de probl√®me d'isolation, juste config manquantes`)
      results.push({ test: 'Isolation Configuration', passed: true, details: 'OK (configs absentes)' })
    } else if (!configOrgB) {
      console.log(`‚ö†Ô∏è  Org B n'a pas de config (Org A en a une)`)
      console.log(`   Pas de probl√®me d'isolation`)
      results.push({ test: 'Isolation Configuration', passed: true, details: 'OK (config B absente)' })
    } else if (!configOrgA) {
      console.log(`‚ö†Ô∏è  Org A n'a pas de config (Org B en a une)`)
      console.log(`   Pas de probl√®me d'isolation`)
      results.push({ test: 'Isolation Configuration', passed: true, details: 'OK (config A absente)' })
    } else if (configOrgA.id === configOrgB.id) {
      console.log(`‚ùå √âCHEC: Les 2 orgs partagent la M√äME config (ID: ${configOrgA.id})`)
      results.push({ test: 'Isolation Configuration', passed: false, details: 'Config partag√©e !' })
    } else {
      console.log(`‚úÖ PASS√â: Configurations correctement isol√©es`)
      console.log(`   Org A config: ${configOrgA.id}`)
      console.log(`   Org B config: ${configOrgB.id}`)
      results.push({ test: 'Isolation Configuration', passed: true, details: 'OK' })
    }

    // ============================================
    // 7. TEST: Articles de blog isol√©s
    // ============================================
    console.log('\nüîí Test 7: Isolation des Articles de Blog')

    const postsOrgA = await prisma.blogPost.findMany({
      where: { organizationId: orgA.id }
    })

    const postsOrgB = await prisma.blogPost.findMany({
      where: { organizationId: orgB.id }
    })

    const leakedPosts = postsOrgB.filter(p => p.organizationId === orgA.id)

    if (leakedPosts.length === 0) {
      console.log(`‚úÖ PASS√â: Articles correctement isol√©s`)
      console.log(`   Org A: ${postsOrgA.length} articles`)
      console.log(`   Org B: ${postsOrgB.length} articles`)
      results.push({ test: 'Isolation Blog', passed: true, details: 'OK' })
    } else {
      console.log(`‚ùå √âCHEC: ${leakedPosts.length} articles de A visibles dans B`)
      results.push({ test: 'Isolation Blog', passed: false, details: `${leakedPosts.length} fuites` })
    }

    // ============================================
    // R√âSUM√â FINAL
    // ============================================
    console.log('\n' + '='.repeat(60))
    console.log('üìä R√âSUM√â DES TESTS\n')

    const passed = results.filter(r => r.passed).length
    const failed = results.filter(r => !r.passed).length

    results.forEach(r => {
      const icon = r.passed ? '‚úÖ' : '‚ùå'
      console.log(`${icon} ${r.test}: ${r.details}`)
    })

    console.log('\n' + '='.repeat(60))
    console.log(`\nüìà R√©sultat: ${passed}/${results.length} tests pass√©s`)

    if (failed > 0) {
      console.log(`\n‚ö†Ô∏è  ATTENTION: ${failed} test(s) √©chou√©(s)`)
      console.log('üö® NE PAS METTRE EN PRODUCTION AVANT DE CORRIGER')
      process.exit(1)
    } else {
      console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !')
      console.log('‚úÖ Isolation multi-tenant valid√©e')
      console.log('‚úÖ Pr√™t pour la production (concernant l\'isolation)')
    }

  } catch (error) {
    console.error('\n‚ùå ERREUR DURANT LES TESTS:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Lancer les tests
testIsolation()
