import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// Version debug qui fonctionne sans authentification stricte
export async function POST(
  request: Request,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  try {
    console.log(`üöÄ Lancement campagne (mode debug): ${id}`);

    // R√©cup√©rer la campagne
    const campaign = await prisma.whatsAppCampaign.findUnique({
      where: { id }
    });

    if (!campaign) {
      return NextResponse.json({ error: 'Campagne non trouv√©e' }, { status: 404 });
    }

    if (campaign.status !== 'draft') {
      return NextResponse.json({ 
        error: 'Cette campagne a d√©j√† √©t√© lanc√©e' 
      }, { status: 400 });
    }

    // R√©cup√©rer le template associ√©
    const template = await prisma.whatsAppTemplate.findUnique({
      where: { id: campaign.templateId || '' }
    });

    // Mettre √† jour le statut de la campagne
    const updatedCampaign = await prisma.whatsAppCampaign.update({
      where: { id },
      data: {
        status: 'active',
        startedAt: new Date(),
        sentCount: campaign.recipientCount || 0
      }
    });

    // Simuler l'envoi des messages
    console.log(`üì± Campagne "${campaign.name}" lanc√©e`);
    console.log(`üì® Template: ${template?.name || 'Non d√©fini'}`);
    console.log(`üë• Envoi √† ${campaign.recipientCount} destinataires`);

    // Si des destinataires sont d√©finis, simuler l'envoi
    if (campaign.recipients) {
      try {
        const recipients = JSON.parse(campaign.recipients);
        console.log(`üì§ Simulation d'envoi √† ${recipients.length} num√©ros`);
        
        // R√©cup√©rer quelques clients pour la simulation
        const clients = await prisma.user.findMany({
          where: {
            role: 'CLIENT',
            phone: { not: null }
          },
          take: 5,
          select: {
            name: true,
            phone: true
          }
        });

        clients.forEach(client => {
          console.log(`  ‚úâÔ∏è Message envoy√© √† ${client.name} (${client.phone})`);
        });
      } catch (e) {
        console.log('üì§ Mode simulation: Envoi des messages...');
      }
    }

    // Apr√®s 3 secondes, marquer comme envoy√©e
    setTimeout(async () => {
      try {
        await prisma.whatsAppCampaign.update({
          where: { id },
          data: { status: 'sent' }
        });
        console.log(`‚úÖ Campagne "${campaign.name}" marqu√©e comme envoy√©e`);
      } catch (error) {
        console.error('Erreur mise √† jour statut:', error);
      }
    }, 3000);

    return NextResponse.json({
      success: true,
      message: 'Campagne lanc√©e avec succ√®s (mode simulation)',
      campaign: {
        ...updatedCampaign,
        templateName: template?.name
      }
    });

  } catch (error) {
    console.error('Erreur lancement campagne:', error);
    return NextResponse.json({ 
      error: 'Erreur serveur',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}