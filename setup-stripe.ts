import { PrismaClient } from '@prisma/client';
import { encryptConfig } from './src/lib/encryption';

const prisma = new PrismaClient();

async function setupStripe() {
  try {
    console.log('üîÑ Configuration de Stripe...');

    // V√©rifier si l'int√©gration Stripe existe d√©j√†
    let stripeIntegration = await prisma.integration.findFirst({
      where: { type: 'stripe' }
    });

    const stripeConfig = {
      publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,
      secretKey: process.env.STRIPE_SECRET_KEY,
      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET
    };

    if (!stripeConfig.secretKey || !stripeConfig.publishableKey) {
      console.error('‚ùå Cl√©s Stripe manquantes dans .env.local');
      console.log('V√©rifiez que ces variables sont d√©finies :');
      console.log('- STRIPE_SECRET_KEY');
      console.log('- STRIPE_PUBLISHABLE_KEY (ou NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY)');
      return;
    }

    // Chiffrer la configuration
    const encryptedConfig = encryptConfig(stripeConfig);

    if (stripeIntegration) {
      // Mettre √† jour
      await prisma.integration.update({
        where: { id: stripeIntegration.id },
        data: {
          enabled: true,
          status: 'connected',
          config: encryptedConfig,
          lastSync: new Date()
        }
      });
      console.log('‚úÖ Stripe mis √† jour et activ√©');
    } else {
      // Cr√©er
      await prisma.integration.create({
        data: {
          type: 'stripe',
          enabled: true,
          status: 'connected',
          config: encryptedConfig,
          lastSync: new Date()
        }
      });
      console.log('‚úÖ Stripe configur√© et activ√©');
    }

    console.log('\nüìù Configuration :');
    console.log('- Publishable Key:', stripeConfig.publishableKey?.substring(0, 20) + '...');
    console.log('- Secret Key:', stripeConfig.secretKey?.substring(0, 20) + '...');
    console.log('- Mode:', stripeConfig.secretKey?.startsWith('sk_live') ? 'üî¥ LIVE (paiements r√©els)' : 'üü¢ TEST');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

setupStripe();
